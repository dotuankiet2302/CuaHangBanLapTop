<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picNhanVien.InitialImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Jy1a/BeYpQnodkUdxQAAAABJRU5ErkJggg==
</value>
  </data>
</root>